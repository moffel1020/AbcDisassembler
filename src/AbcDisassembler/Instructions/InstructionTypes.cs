using System;
using System.Collections.Generic;
using System.IO;

namespace AbcDisassembler.Instructions;

public class Instruction
{
    public required byte OpCode { get; set; }
    public required string Name { get; set; }
    public required List<Argument> Args { get; set; }

    internal static Instruction Read(BinaryReader reader, CPoolInfo cpool)
    {
        byte opCode = reader.ReadByte();

        (string, ArgType[]) info = GetInfo(opCode);
        string name = info.Item1;

        List<Argument> args = new(info.Item2.Length);
        foreach (ArgType t in info.Item2)
            args.Add(Argument.Read(reader, t, cpool));

        return new()
        {
            OpCode = opCode,
            Name = name,
            Args = args
        };
    }

    public static (string, ArgType[]) GetInfo(byte opCode) => opCode switch
    {
        0x00 => ("db", [ArgType.UByteLiteral]),
        // 0x01 => ("bkpt", [ArgType.Unknown]),
        0x02 => ("nop", []),
        0x03 => ("throw", []),
        0x04 => ("getsuper", [ArgType.Multiname]),
        0x05 => ("setsuper", [ArgType.Multiname]),
        0x06 => ("dxns", [ArgType.String]),
        0x07 => ("dxnslate", []),
        0x08 => ("kill", [ArgType.UintLiteral]),
        0x09 => ("label", []),
        // 0x0A => ("0x0A", [ArgType.Unknown]),
        // 0x0B => ("0x0B", [ArgType.Unknown]),
        0x0C => ("ifnlt", [ArgType.JumpTarget]),
        0x0D => ("ifnle", [ArgType.JumpTarget]),
        0x0E => ("ifngt", [ArgType.JumpTarget]),
        0x0F => ("ifnge", [ArgType.JumpTarget]),
        0x10 => ("jump", [ArgType.JumpTarget]),
        0x11 => ("iftrue", [ArgType.JumpTarget]),
        0x12 => ("iffalse", [ArgType.JumpTarget]),
        0x13 => ("ifeq", [ArgType.JumpTarget]),
        0x14 => ("ifne", [ArgType.JumpTarget]),
        0x15 => ("iflt", [ArgType.JumpTarget]),
        0x16 => ("ifle", [ArgType.JumpTarget]),
        0x17 => ("ifgt", [ArgType.JumpTarget]),
        0x18 => ("ifge", [ArgType.JumpTarget]),
        0x19 => ("ifstricteq", [ArgType.JumpTarget]),
        0x1A => ("ifstrictne", [ArgType.JumpTarget]),
        0x1B => ("lookupswitch", [ArgType.SwitchDefaultTarget, ArgType.SwitchTargets]),
        0x1C => ("pushwith", []),
        0x1D => ("popscope", []),
        0x1E => ("nextname", []),
        0x1F => ("hasnext", []),
        0x20 => ("pushnull", []),
        0x21 => ("pushundefined", []),
        0x22 => ("pushfloat", [ArgType.Float]), // need float support
        0x23 => ("nextvalue", []),
        0x24 => ("pushbyte", [ArgType.ByteLiteral]),
        0x25 => ("pushshort", [ArgType.IntLiteral]),
        0x26 => ("pushtrue", []),
        0x27 => ("pushfalse", []),
        0x28 => ("pushnan", []),
        0x29 => ("pop", []),
        0x2A => ("dup", []),
        0x2B => ("swap", []),
        0x2C => ("pushstring", [ArgType.String]),
        0x2D => ("pushint", [ArgType.Int]),
        0x2E => ("pushuint", [ArgType.Uint]),
        0x2F => ("pushdouble", [ArgType.Double]),
        0x30 => ("pushscope", []),
        0x31 => ("pushnamespace", [ArgType.Namespace]),
        0x32 => ("hasnext2", [ArgType.UintLiteral, ArgType.UintLiteral]),
        0x33 => ("pushdecimal", [ArgType.Decimal]),
        // 0x34 => ("pushdnan", [ArgType.Unknown]),
        0x35 => ("li8", []),
        0x36 => ("li16", []),
        0x37 => ("li32", []),
        0x38 => ("lf32", []),
        0x39 => ("lf64", []),
        0x3A => ("si8", []),
        0x3B => ("si16", []),
        0x3C => ("si32", []),
        0x3D => ("sf32", []),
        0x3E => ("sf64", []),
        // 0x3F => ("0x3F", [ArgType.Unknown]),
        0x40 => ("newfunction", [ArgType.Method]),
        0x41 => ("call", [ArgType.UintLiteral]),
        0x42 => ("construct", [ArgType.UintLiteral]),
        0x43 => ("callmethod", [ArgType.UintLiteral, ArgType.UintLiteral]),
        0x44 => ("callstatic", [ArgType.Method, ArgType.UintLiteral]),
        0x45 => ("callsuper", [ArgType.Multiname, ArgType.UintLiteral]),
        0x46 => ("callproperty", [ArgType.Multiname, ArgType.UintLiteral]),
        0x47 => ("returnvoid", []),
        0x48 => ("returnvalue", []),
        0x49 => ("constructsuper", [ArgType.UintLiteral]),
        0x4A => ("constructprop", [ArgType.Multiname, ArgType.UintLiteral]),
        // 0x4B => ("callsuperid", [ArgType.Unknown]),
        0x4C => ("callproplex", [ArgType.Multiname, ArgType.UintLiteral]),
        // 0x4D => ("callinterface", [ArgType.Unknown]),
        0x4E => ("callsupervoid", [ArgType.Multiname, ArgType.UintLiteral]),
        0x4F => ("callpropvoid", [ArgType.Multiname, ArgType.UintLiteral]),
        0x50 => ("sxi1", []),
        0x51 => ("sxi8", []),
        0x52 => ("sxi16", []),
        0x53 => ("applytype", [ArgType.UintLiteral]),
        // 0x54 => ("0x54", [ArgType.Unknown]),
        0x55 => ("newobject", [ArgType.UintLiteral]),
        0x56 => ("newarray", [ArgType.UintLiteral]),
        0x57 => ("newactivation", []),
        0x58 => ("newclass", [ArgType.Class]),
        0x59 => ("getdescendants", [ArgType.Multiname]),
        0x5A => ("newcatch", [ArgType.UintLiteral]),
        // 0x5B => ("deldescendants", [ArgType.Unknown]),
        // 0x5C => ("0x5C", [ArgType.Unknown]),
        0x5D => ("findpropstrict", [ArgType.Multiname]),
        0x5E => ("findproperty", [ArgType.Multiname]),
        0x5F => ("finddef", [ArgType.Multiname]),
        0x60 => ("getlex", [ArgType.Multiname]),
        0x61 => ("setproperty", [ArgType.Multiname]),
        0x62 => ("getlocal", [ArgType.UintLiteral]),
        0x63 => ("setlocal", [ArgType.UintLiteral]),
        0x64 => ("getglobalscope", []),
        0x65 => ("getscopeobject", [ArgType.UByteLiteral]),
        0x66 => ("getproperty", [ArgType.Multiname]),
        0x67 => ("getouterscope", [ArgType.UintLiteral]),
        0x68 => ("initproperty", [ArgType.Multiname]),
        0x69 => ("setpropertylate", []),
        0x6A => ("deleteproperty", [ArgType.Multiname]),
        0x6B => ("deletepropertylate", []),
        0x6C => ("getslot", [ArgType.UintLiteral]),
        0x6D => ("setslot", [ArgType.UintLiteral]),
        0x6E => ("getglobalslot", [ArgType.UintLiteral]),
        0x6F => ("setglobalslot", [ArgType.UintLiteral]),
        0x70 => ("convert_s", []),
        0x71 => ("esc_xelem", []),
        0x72 => ("esc_xattr", []),
        0x73 => ("convert_i", []),
        0x74 => ("convert_u", []),
        0x75 => ("convert_d", []),
        0x76 => ("convert_b", []),
        0x77 => ("convert_o", []),
        0x78 => ("checkfilter", []),
        // 0x79 => ("convert_m", [ArgType.Unknown]),
        // 0x7A => ("convert_m_p", [ArgType.Unknown]),
        // 0x7B => ("0x7B", [ArgType.Unknown]),
        // 0x7C => ("0x7C", [ArgType.Unknown]),
        // 0x7D => ("0x7D", [ArgType.Unknown]),
        // 0x7E => ("0x7E", [ArgType.Unknown]),
        // 0x7F => ("0x7F", [ArgType.Unknown]),
        0x80 => ("coerce", [ArgType.Multiname]),
        0x81 => ("coerce_b", []),
        0x82 => ("coerce_a", []),
        0x83 => ("coerce_i", []),
        0x84 => ("coerce_d", []),
        0x85 => ("coerce_s", []),
        0x86 => ("astype", [ArgType.Multiname]),
        0x87 => ("astypelate", []),
        // 0x88 => ("coerce_u", [ArgType.Unknown]),
        // 0x89 => ("coerce_o", [ArgType.Unknown]),
        // 0x8A => ("0x8A", [ArgType.Unknown]),
        // 0x8B => ("0x8B", [ArgType.Unknown]),
        // 0x8C => ("0x8C", [ArgType.Unknown]),
        // 0x8D => ("0x8D", [ArgType.Unknown]),
        // 0x8E => ("0x8E", [ArgType.Unknown]),
        // 0x8F => ("negate_p", [ArgType.Unknown]),
        0x90 => ("negate", []),
        0x91 => ("increment", []),
        0x92 => ("inclocal", [ArgType.UintLiteral]),
        0x93 => ("decrement", []),
        0x94 => ("declocal", [ArgType.UintLiteral]),
        0x95 => ("typeof", []),
        0x96 => ("not", []),
        0x97 => ("bitnot", []),
        // 0x98 => ("0x98", [ArgType.Unknown]),
        // 0x99 => ("0x99", [ArgType.Unknown]),
        // 0x9A => ("concat", [ArgType.Unknown]),
        // 0x9B => ("add_d", [ArgType.Unknown]),
        // 0x9C => ("increment_p", [ArgType.Unknown]),
        // 0x9D => ("inclocal_p", [ArgType.Unknown]),
        // 0x9E => ("decrement_p", [ArgType.Unknown]),
        // 0x9F => ("declocal_p", [ArgType.Unknown]),
        0xA0 => ("add", []),
        0xA1 => ("subtract", []),
        0xA2 => ("multiply", []),
        0xA3 => ("divide", []),
        0xA4 => ("modulo", []),
        0xA5 => ("lshift", []),
        0xA6 => ("rshift", []),
        0xA7 => ("urshift", []),
        0xA8 => ("bitand", []),
        0xA9 => ("bitor", []),
        0xAA => ("bitxor", []),
        0xAB => ("equals", []),
        0xAC => ("strictequals", []),
        0xAD => ("lessthan", []),
        0xAE => ("lessequals", []),
        0xAF => ("greaterthan", []),
        0xB0 => ("greaterequals", []),
        0xB1 => ("instanceof", []),
        0xB2 => ("istype", [ArgType.Multiname]),
        0xB3 => ("istypelate", []),
        0xB4 => ("in", []),
        // 0xB5 => ("add_p", [ArgType.Unknown]),
        // 0xB6 => ("subtract_p", [ArgType.Unknown]),
        // 0xB7 => ("multiply_p", [ArgType.Unknown]),
        // 0xB8 => ("divide_p", [ArgType.Unknown]),
        // 0xB9 => ("modulo_p", [ArgType.Unknown]),
        // 0xBA => ("0xBA", [ArgType.Unknown]),
        // 0xBB => ("0xBB", [ArgType.Unknown]),
        // 0xBC => ("0xBC", [ArgType.Unknown]),
        // 0xBD => ("0xBD", [ArgType.Unknown]),
        // 0xBE => ("0xBE", [ArgType.Unknown]),
        // 0xBF => ("0xBF", [ArgType.Unknown]),
        0xC0 => ("increment_i", []),
        0xC1 => ("decrement_i", []),
        0xC2 => ("inclocal_i", [ArgType.UintLiteral]),
        0xC3 => ("declocal_i", [ArgType.UintLiteral]),
        0xC4 => ("negate_i", []),
        0xC5 => ("add_i", []),
        0xC6 => ("subtract_i", []),
        0xC7 => ("multiply_i", []),
        // 0xC8 => ("0xC8", [ArgType.Unknown]),
        // 0xC9 => ("0xC9", [ArgType.Unknown]),
        // 0xCA => ("0xCA", [ArgType.Unknown]),
        // 0xCB => ("0xCB", [ArgType.Unknown]),
        // 0xCC => ("0xCC", [ArgType.Unknown]),
        // 0xCD => ("0xCD", [ArgType.Unknown]),
        // 0xCE => ("0xCE", [ArgType.Unknown]),
        // 0xCF => ("0xCF", [ArgType.Unknown]),
        0xD0 => ("getlocal0", []),
        0xD1 => ("getlocal1", []),
        0xD2 => ("getlocal2", []),
        0xD3 => ("getlocal3", []),
        0xD4 => ("setlocal0", []),
        0xD5 => ("setlocal1", []),
        0xD6 => ("setlocal2", []),
        0xD7 => ("setlocal3", []),
        // 0xD8 => ("0xD8", [ArgType.Unknown]),
        // 0xD9 => ("0xD9", [ArgType.Unknown]),
        // 0xDA => ("0xDA", [ArgType.Unknown]),
        // 0xDB => ("0xDB", [ArgType.Unknown]),
        // 0xDC => ("0xDC", [ArgType.Unknown]),
        // 0xDD => ("0xDD", [ArgType.Unknown]),
        // 0xDE => ("0xDE", [ArgType.Unknown]),
        // 0xDF => ("0xDF", [ArgType.Unknown]),
        // 0xE0 => ("0xE0", [ArgType.Unknown]),
        // 0xE1 => ("0xE1", [ArgType.Unknown]),
        // 0xE2 => ("0xE2", [ArgType.Unknown]),
        // 0xE3 => ("0xE3", [ArgType.Unknown]),
        // 0xE4 => ("0xE4", [ArgType.Unknown]),
        // 0xE5 => ("0xE5", [ArgType.Unknown]),
        // 0xE6 => ("0xE6", [ArgType.Unknown]),
        // 0xE7 => ("0xE7", [ArgType.Unknown]),
        // 0xE8 => ("0xE8", [ArgType.Unknown]),
        // 0xE9 => ("0xE9", [ArgType.Unknown]),
        // 0xEA => ("0xEA", [ArgType.Unknown]),
        // 0xEB => ("0xEB", [ArgType.Unknown]),
        // 0xEC => ("0xEC", [ArgType.Unknown]),
        // 0xED => ("0xED", [ArgType.Unknown]),
        // 0xEE => ("0xEE", [ArgType.Unknown]),
        0xEF => ("debug", [ArgType.UByteLiteral, ArgType.String, ArgType.UByteLiteral, ArgType.UintLiteral]),
        0xF0 => ("debugline", [ArgType.UintLiteral]),
        0xF1 => ("debugfile", [ArgType.String]),
        // 0xF2 => ("bkptline", [ArgType.Unknown]),
        // 0xF3 => ("timestamp", [ArgType.Unknown]),
        // 0xF4 => ("0xF4", [ArgType.Unknown]),
        // 0xF5 => ("0xF5", [ArgType.Unknown]),
        // 0xF6 => ("0xF6", [ArgType.Unknown]),
        // 0xF7 => ("0xF7", [ArgType.Unknown]),
        // 0xF8 => ("0xF8", [ArgType.Unknown]),
        // 0xF9 => ("0xF9", [ArgType.Unknown]),
        // 0xFA => ("0xFA", [ArgType.Unknown]),
        // 0xFB => ("0xFB", [ArgType.Unknown]),
        // 0xFC => ("0xFC", [ArgType.Unknown]),
        // 0xFD => ("0xFD", [ArgType.Unknown]),
        // 0xFE => ("0xFE", [ArgType.Unknown]),
        // 0xFF => ("0xFF", [ArgType.Unknown]),
        _ => throw new Exception($"Unknown instruction {opCode}")
    };
}
